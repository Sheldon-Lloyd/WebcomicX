@using System.Xml.Linq
@using System.Xml
@using System.Web.Mvc
@using System.Xml.XPath
@using WebMatrix.WebData;

@{
    Page.Title = "Edit Comic";

    //intialize variables
    var comicNumber = UrlData[0].AsInt();
    var next = Request["next"];
    var pageCount = 0;
    var collectionCount = 0;
    var title = "";
    var description = "";
    var author = "";
    var content = "";
    var collectionNo = "";
    var comicNode = comicNumber - 1;
    var comicfilename = "/content/xml/comics/comic-list.xml";
    var pagesfilename = "/content/xml/comics/comic-" + comicNumber + ".xml";
    var guide = Request["tutorial"].AsBool();
    var updated = "";
    var returnUrl = "~/webcomicx/admin/edit-comic/" + comicNumber;
    var tutorial = "";
    var date = DateTime.UtcNow;

    if (guide) {//if user is in tutorial
                //mode change th urls on this page to ensure they stay in the tutorial when completing tasks
        returnUrl = returnUrl + "&tutorial=true";
        tutorial = "?tutorial=true";
    }

    //load xml files
    var load = new Comic();
    var comicList = load.LoadComic(comicfilename);
    var comic = load.LoadComic(pagesfilename);
    var collections = load.LoadComic("/content/xml/comics/collections.xml");
    var settings = load.LoadComic("/App_Data/WebcomicX.xml");
    var account = load.LoadComic("/App_Data/account.xml");

    var user = (from xml in account.Descendants("User")
                where xml.Element("UserName").Value == WebSecurity.CurrentUserName.ToString()
                select xml).FirstOrDefault();

    try {//check to see if the comic exists in the comic list
        title = comicList.Descendants("Comic").ElementAt(comicNode).Value;
    } catch {//when it does exist redirect to create a new comic
        Session["comic-exist"] = "false";

        Response.Redirect("~/webcomicx/admin/new-comic");
    }

    try {
        title = comicList.Descendants("Comic").Descendants("Title").ElementAt(comicNode).Value;
    } catch { }
    try {
        description = comic.Descendants("ComicCopy").Descendants("Description").ElementAt(0).Value;
    } catch { }
    try {
        content = comic.Descendants("ComicCopy").Descendants("Content").ElementAt(0).Value;
    } catch { }
    if (IsPost) {
        author = user.Element("PenName").Value;
        title = Request["title"];
        description = Request.Unvalidated("description");
        content = Request.Unvalidated("comicContent");
        collectionNo = Request["collection"];

        //edit xml files
        if (comicList.XPathSelectElement("//Title") != null) {//check if comic is included in comic-list.xml file
            comicList.Descendants("Comic").Descendants("Title").ElementAt(comicNode).Value = title;
        }
        if (comic.XPathSelectElement("//ComicCopy") != null) {
            if (comic.XPathSelectElement("//ComicCopy/Description") != null) {
                comic.Descendants("ComicCopy").Descendants("Description").ElementAt(0).Value = description;
            } else {
                var newElement = new XElement(
                    new XElement("Description", description)
                );
                comic.Descendants("ComicCopy").ElementAt(0).Add(newElement);

            }
            if (comic.XPathSelectElement("//ComicCopy/Content") != null) {
                comic.Descendants("ComicCopy").Descendants("Content").ElementAt(0).Value = content;
            } else {
                var newElement = new XElement(
                    new XElement("Content", content)
                );
                comic.Descendants("ComicCopy").ElementAt(0).Add(newElement);

            }
        } else {
            var newElement = new XElement("ComicCopy",
                new XElement("Author", author),
                new XElement("Description", description),
                new XElement("Content", content)
            );

            comic.Descendants("PageList").ElementAt(0).AddBeforeSelf(newElement);
        }
        comicList.Descendants("Comic").Descendants("Collection").ElementAt(comicNode).Value = collectionNo;
        comicList.Descendants("Comic").Descendants("EditDate").ElementAt(comicNode).Value = date.ToString();

        Session["updated"] = "true";

        //save comic
        comicList.Save(Server.MapPath(comicfilename));
        comic.Save(Server.MapPath(pagesfilename));
        Response.Redirect(returnUrl);
    }
}
@if (Session["updated"] == "true") {
    HttpContext.Current.Session.Remove("updated");
    <div class="prompt">Your changes have been saved <a onclick="closePrompt()">&times;</a></div>
}
<h2 class="content-wrapper">
    Edit Comic
    <a class="button float-right" href="/comic/read/@comicNumber/" target="_blank">View Comic</a><a class="button float-right" href="/webcomicx/admin/manage-comics/@tutorial"> &laquo; Back to Comic Manager</a>
</h2>
<div class="clear-fix"></div>
@if (guide) {
    <aside>
        <section class="message-guide">
            <h3>Add pages to your comic</h3>
            <a class="message-guide-dismiss" onclick="$('.message-guide').remove()">&times; Dismiss</a>
            <p>Now that your comic has been created:</p>
            <ol>
                <li>Add pages to your comic</li>
                <li>Edit or delete pages</li>
                <li>Add this comic to a collection</li>
            </ol>
            <p>If you haven't already, if you'd like you can <a href="/webcomicx/admin/blog?tutorial=true">setup your blog</a></p>
        </section>
    </aside>
}
<div class="content-wrapper">
    <form method="post" enctype="multipart/form-data">
        <fieldset>
            <input placeholder="Title" type="text" name="title" value="@title">
            <label>Comic Information</label>
            <textarea class="copy" name="comicContent">@content</textarea>
            <br />
            <label>Short Description <span class="sub-text">(Recommended Maximum of 155 Characters)</span></label>
            <textarea name="description">@description</textarea>
            <label>Collection</label>
            <select name="collection">
                <option value="">None</option>
                @foreach (var collection in collections.Descendants("Collection")) {//list collections
                    collectionCount++;
                    <option value="@collectionCount" @if (comicList.Descendants("Comic").Descendants("Collection").ElementAt(comicNode).Value == collectionCount.ToString()) { <text> selected="selected" </text> }>@collection.Element("Title").Value</option>
                }
            </select>
            <div>
                <button type="submit"> Save</button>
            </div>
        </fieldset>
    </form>
</div>
@section sidePanel{
    <div>
        <div id="page-submit" class="pop-up @if(next!="next"){<text>is-hidden</text>} ">
            <div id="title">
                <h2>Add Page</h2>
                <a onclick="$('#page-submit').hide()" id="close">&times;</a>
                <div class="clear-fix"></div>
            </div>
            <div class="box">
                <form method="post" enctype="multipart/form-data" action="/webcomicx/admin/controlers/new-page/@comicNumber/@tutorial">
                    <fieldset>
                        <div class="imageUpload">
                            <label for="image">Image</label>
                            <input type="file" name="image" id="images" onchange="showUploadedItem(this)" />
                            <div class="image-list"></div>
                        </div>
                        <label>Script</label>
                        <textarea name="content"></textarea>
                        <label>Short Description <span class="sub-text">(Recommended Maximum of 155 Characters)</span></label>
                        <textarea name="description"></textarea>
                        <a onclick="$('#page-submit').hide();$(this).closest('form').trigger('reset')">Cancel</a>
                        <button type="submit">Create Page</button>
                    </fieldset>
                </form>
            </div>
        </div>
        <div class="collections">
            <h3>Pages for Comic</h3>
            <div class="inner-collection">
                <button class="submit-button" onclick="$('#page-submit').show()" style="max-height: 190px">New Page</button>
                <ul class="grid item-list">
                    @foreach (var page in comic.Descendants("Page")) {//display pages in comic
                                                                     //count pages
                        pageCount++;
                        <li style="background-image:url('@Href("~/content/uploads/pages/thumbnail/"+page.Element("Image").Value)');background-size: contain;background-position:center top;background-repeat: no-repeat;cursor:initial;padding-top:0">
                            <a style="display: block;height: 100%" href="/webcomicx/admin/edit-page/@comicNumber/@pageCount/@tutorial"></a>
                            <div class="options">
                                <a href="/webcomicx/admin/edit-page/@comicNumber/@pageCount/@tutorial">Edit</a> | <a onclick="deletePrompt(this)">Delete</a> | <a href="@load.viewComic(comicNumber,pageCount)" target="_blank">View</a>
                            </div>
                            <form class="delete is-hidden" method="post" action="/webcomicx/admin/controlers/delete-page">
                                <div>
                                    <h5>Delete this page?</h5>
                                    <a onclick="deletePrompt(this)">Cancel</a>
                                    <button type="submit" value="@pageCount" name="pageNumber">Delete</button>
                                    <input type="hidden" value="@comicNumber" name="comicNumber">
                                </div>
                            </form>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
}
